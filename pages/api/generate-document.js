import axios from 'axios';
import fs from 'fs';
import path from 'path';
import { generateLegalResponse } from './llm-utils';

// Simple PDF generation function using pure Node.js
async function generatePDF(content, docType) {
  // In a full implementation, we'd use a PDF library like PDFKit
  // For now, we'll just create some placeholder content
  
  // Create a simple HTML-like string
  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>${docType} Document</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #333366; }
        .header { border-bottom: 1px solid #999; padding-bottom: 10px; }
        .content { margin-top: 20px; }
        .footer { margin-top: 30px; font-size: 0.8em; color: #666; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>${docType}</h1>
        <p>Generated by NyayaBot on ${new Date().toLocaleDateString()}</p>
      </div>
      <div class="content">
        ${content.replace(/\n/g, '<br>')}
      </div>
      <div class="footer">
        <p>This document is auto-generated and may need review by a legal professional.</p>
      </div>
    </body>
    </html>
  `;
  
  // Convert HTML to base64 (in a real app, we'd use a PDF generation library)
  // This is just a placeholder for demonstration
  const base64Data = Buffer.from(htmlContent).toString('base64');
  
  return base64Data;
}

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    res.status(405).json({ error: 'Method not allowed' });
    return;
  }

  const { docType, conversationHistory } = req.body;

  if (!docType) {
    res.status(400).json({ error: 'Document type is required' });
    return;
  }

  if (!conversationHistory || conversationHistory.length === 0) {
    res.status(400).json({ error: 'Conversation history is required' });
    return;
  }

  try {
    // Extract just the text content from the conversation history
    const conversationText = conversationHistory
      .map(message => `${message.role}: ${message.content}`)
      .join('\n');

    // Generate legal document content using OpenAI
    const prompt = `
      Based on the following conversation, generate a proper ${docType} in formal legal language.
      Follow Indian legal standards and format for this document type.
      
      Conversation:
      ${conversationText}
      
      Create a complete, well-structured ${docType} with all necessary sections, clauses, and legal terminology.
    `;
    
    // Generate content using OpenAI
    const documentContent = await generateLegalResponse(prompt);
    
    // Generate PDF with this content
    const base64Data = await generatePDF(documentContent, docType);
    
    res.status(200).json({ 
      filename: `${docType.toLowerCase().replace(/ /g, '_')}_document.pdf`,
      data: base64Data
    });
  } catch (error) {
    console.error('Error generating document:', error);
    res.status(500).json({ 
      error: 'Failed to generate document',
      details: error.message 
    });
  }
}